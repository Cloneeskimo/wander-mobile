package com.jacoboaks.wandermobile.game.gameitem;

import android.view.MotionEvent;

import com.jacoboaks.wandermobile.graphics.Font;
import com.jacoboaks.wandermobile.graphics.Material;
import com.jacoboaks.wandermobile.graphics.Model;
import com.jacoboaks.wandermobile.graphics.ShaderProgram;
import com.jacoboaks.wandermobile.graphics.Texture;
import com.jacoboaks.wandermobile.graphics.Transformation;
import com.jacoboaks.wandermobile.util.Bounds;
import com.jacoboaks.wandermobile.util.Color;
import com.jacoboaks.wandermobile.util.Coord;

/**
 * Represents a pressable TextItem.
 */
public class ButtonTextItem extends TextItem {

    //Data
    private int actionCode;
    private float padding;
    private Color unselectedColor, selectedColor;
    private boolean selected = false;
    private GameItem underButton = null;

    /**
     * Constructs this ButtonTextItem with the given information.
     * @param font the font_default to use for the text
     * @param underTexture the texture to apply underneath the button
     * @param text the text to display
     * @param unselected the color to use when the button is not texture_selected
     * @param selected the color to use when the button is texture_selected
     * @param actionCode the action code to return when this button is pressed
     * @param padding the amount of padding in between the text and the underlying texture of the button
     */
    public ButtonTextItem(Font font, Texture underTexture, String text, Color unselected, Color selected, int actionCode, float padding) {
        super(font, text, new Material(font.getFontSheet(), unselected, true), 0f, 0f);
        this.unselectedColor = unselected;
        this.selectedColor = selected;
        this.actionCode = actionCode;
        this.padding = padding;
        if (underTexture != null) {
            this.underButton = new GameItem(new Model(Model.getRectangleModelCoords(this.width + padding * 2, this.height + padding * 2),
            Model.STD_SQUARE_TEX_COORDS(), Model.STD_SQUARE_DRAW_ORDER(), new Material(underTexture)), this.x, this.y);
        }
    }

    /**
     * Constructs this ButtonTextItem with the given information.
     * @param font the font_default to use for the text
     * @param text the text to display
     * @param unselected the color to use when the button is not texture_selected
     * @param selected the color to use when the button is texture_selected
     * @param actionCode the action code to return when this button is pressed
     */
    public ButtonTextItem(Font font, String text, Color unselected, Color selected, int actionCode) {
        this(font, null, text, unselected, selected, actionCode, 0.0f);
    }

    /**
     * Constructs this ButtonTextItem by copying another ButtonTextItem.
     * @param other the ButtonTextItem to copy from
     */
    public ButtonTextItem(ButtonTextItem other) {
        super(other);
        this.actionCode = other.actionCode;
        this.unselectedColor = other.unselectedColor;
        this.selectedColor = other.selectedColor;
        this.selected = other.selected;
    }

    /**
     * Will update this ButtonTextITem based on the user's input.
     * @param e the MotionEvent generated by the user's actions
     * @return this ButtonTextItem's action code if the user has pressed this ButtonTextItem, and
     * -1 otherwise
     */
    public int updateSelection(MotionEvent e) {

        //see if finger is over this button
        Coord touchPos = new Coord(e.getX(), e.getY());
        Transformation.screenToNormalized(touchPos);
        Transformation.normalizedToAspected(touchPos);
        Bounds bounds = this.getBounds();
        boolean fingerOver = bounds.intersects(touchPos);

        //set to appropriate color
        if (fingerOver) {
            if (e.getAction() == MotionEvent.ACTION_UP) { //check if they released on this finger
                this.selected = false;
                this.model.getMaterial().setColor(this.unselectedColor);
                return this.actionCode;
            } else if (!this.selected) { //otherwise make sure appropriate color is texture_selected
                this.model.getMaterial().setColor(this.selectedColor);
                this.selected = true;
            }
        } else {
            if (this.selected) {
                this.model.getMaterial().setColor(this.unselectedColor);
                this.selected = false;
            }
        }

        //return -1 if the user did not press the button
        return -1;
    }

    /**
     * Renders this ButtonTextItem.
     * @param shaderProgram the ShaderProgram to render this ButtonTextItem with
     */
    @Override
    public void render(ShaderProgram shaderProgram) {
        if (this.underButton != null) this.underButton.render(shaderProgram);
        super.render(shaderProgram);
    }

    /**
     * Scales this ButtonTextItem by the given factor.
     * @param factor the factor to scale the model by
     */
    @Override
    public void scale(float factor) {
        if (this.underButton != null) this.underButton.scale(factor);
        super.scale(factor);
    }

    /**
     * @return the width of this ButtonTextItem
     */
    @Override
    public float getWidth() {
        float w = super.getWidth();
        w += this.padding * 2;
        return w;
    }

    /**
     * @return the height of this ButtonTextItem
     */
    @Override
    public float getHeight() {
        float h = super.getHeight();
        h += this.padding * 2;
        return h;
    }
}
